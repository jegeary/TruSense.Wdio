"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dotenv = require("dotenv");
dotenv.config();
var nodeSymbol = function (key) { return '__mts_' + key; };
var testNameSymbol = nodeSymbol('test');
var parametersSymbol = nodeSymbol('parametersSymbol');
var nameForParametersSymbol = nodeSymbol('nameForParameters');
var localhost = 'http://localhost';
var pmsUrl = process.env.PMS_URL || localhost;
var tmsUrl = process.env.TMS_URL || localhost;
function getAllure() {
    var allure = global.allure;
    if (!allure) {
        throw new Error('Unable to find AllureInterface in a global context');
    }
    return allure;
}
function makeParamsFunction(mark) {
    return function (params, name) {
        return function (target, propertyKey, descriptor) {
            target[propertyKey][testNameSymbol] = propertyKey.toString();
            target[propertyKey][parametersSymbol] = target[propertyKey][parametersSymbol] || [];
            [].concat(params || []).forEach(function (param) {
                target[propertyKey][parametersSymbol].push({ mark: mark, name: name, params: param });
            });
            return processDescriptor(function (args) { return args.toString(); }, function (arg) { return getAllure().addParameter('inputs', arg); }, descriptor);
        };
    };
}
function makeParamsNameFunction() {
    return function (nameForParameters) {
        return function (target, propertyKey, descriptor) {
            target[propertyKey][nameForParametersSymbol] = nameForParameters;
            return descriptor;
        };
    };
}
function makeParamsObject() {
    return Object.assign(makeParamsFunction(0), {
        only: makeParamsFunction(2),
        pending: makeParamsFunction(3),
        skip: makeParamsFunction(1),
        withCustomTestName: makeParamsNameFunction()
    });
}
function processDescriptor(parameterFn, reporterFn, descriptor) {
    var original = descriptor.value;
    if (typeof original === 'function') {
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                var value = typeof parameterFn === 'function' ? parameterFn.apply(this, args) : parameterFn;
                reporterFn(value);
            }
            catch (e) {
                console.error("[ERROR] Failed to apply decorator: " + e);
            }
            return original.apply(this, args);
        };
    }
    for (var _i = 0, _a = Object.keys(original); _i < _a.length; _i++) {
        var prop = _a[_i];
        if (original.hasOwnProperty(prop) && prop.startsWith('__mts_')) {
            descriptor.value[prop] = original[prop];
        }
    }
    return descriptor;
}
function processDecorator(parameterFn, reporterFn) {
    return function (target, property, descriptor) {
        return processDescriptor(parameterFn, reporterFn, descriptor);
    };
}
function step(nameFn) {
    return function (target, property, descriptor) {
        var original = descriptor.value;
        var callable;
        if (typeof original === 'function') {
            descriptor.value = function () {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                try {
                    var value_1 = typeof nameFn === 'function' ? nameFn.apply(this, args) : nameFn;
                    callable = function () { return getAllure().step(value_1, function () { return original.apply(_this, args); }); };
                }
                catch (e) {
                    console.error("[ERROR] Failed to apply decorator: " + e);
                }
                return callable.apply(this, args);
            };
        }
        return descriptor;
    };
}
exports.step = step;
function testCaseId(idFn) {
    return processDecorator(idFn, function (id) { return getAllure().addLink(id, tmsUrl + "/" + id, "tms"); });
}
exports.testCaseId = testCaseId;
function issue(idFn) {
    return processDecorator(idFn, function (id) { return getAllure().addLink(id, pmsUrl + "/" + id, "issue"); });
}
exports.issue = issue;
function feature(featureFn) {
    return processDecorator(featureFn, function (name) { return getAllure().feature(name); });
}
exports.feature = feature;
function story(storyFn) {
    return processDecorator(storyFn, function (name) { return getAllure().story(name); });
}
exports.story = story;
function severity(severityFn) {
    return processDecorator(severityFn, function (name) { return getAllure().severity(name); });
}
exports.severity = severity;
function tag(tagFn) {
    return processDecorator(tagFn, function (name) { return getAllure().addTag(name); });
}
exports.tag = tag;
function owner(ownerFn) {
    return processDecorator(ownerFn, function (name) { return getAllure().addOwner(name); });
}
exports.owner = owner;
function description(descriptionFn) {
    return processDecorator(descriptionFn, function (text) { return getAllure().setDescription(text); });
}
exports.description = description;
exports.data = makeParamsObject();
//# sourceMappingURL=data:application/json;base64,